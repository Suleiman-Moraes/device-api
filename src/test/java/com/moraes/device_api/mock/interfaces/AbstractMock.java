package com.moraes.device_api.mock.interfaces;

import java.util.LinkedList;
import java.util.List;

import com.moraes.device_api.mock.util.MockUtil;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public abstract class AbstractMock<E> {

    protected List<String> ignoreFields = null;

    protected AbstractMock() {
        ignoreFields = new LinkedList<>();
        ignoreFields.add("key");
    }

    /**
     * Returns a mock entity object with mock values set using reflection.
     * The values generated are based on the type of the field. For example, a field
     * of type {@link java.lang.Boolean}
     * will be set to {@code true}, a field of type {@link java.lang.Double} will be
     * set to
     * {@code number.doubleValue() + 0.5}, and a field of type
     * {@link java.lang.Integer} will be set to
     * {@code number}.
     * <p>
     * The method will also call the
     * {@link #setOdersValues(E, Integer)} method to set any additional values.
     * <p>
     * If any exception occurs during the process, the method will log a warning
     * message and return null.
     * <p>
     * 
     * @param number the number to use when generating values
     * @return the mock entity object, or null if an exception occurs
     */
    public E mockEntity(Integer number) {
        try {
            E entity = getClazz().getDeclaredConstructor().newInstance();
            MockUtil.toFill(entity, number, ignoreFields);
            setOdersValues(entity, number);
            return entity;
        } catch (Exception e) {
            log.warn(e.getMessage(), e);
        }
        return null;
    }

    /**
     * Returns a list of mock entities with a default size of 14.
     * Each entity in the list is generated by calling the
     * {@link #mockEntity(int)} method with a number starting from
     * 1 and incrementing for each entity in the list.
     * 
     * @return a list of mock entities
     */
    public List<E> mockEntityList() {
        return mockEntityList(14);
    }

    /**
     * Returns a list of mock entities with the given size.
     * Each entity in the list is generated by calling the
     * {@link #mockEntity(int)} method with a number starting from
     * 1 and incrementing for each entity in the list.
     *
     * @param size the size of the list to be returned
     * @return a list of mock entities
     */
    public List<E> mockEntityList(int size) {
        List<E> entitys = new LinkedList<>();
        for (int i = 1; i <= size; i++) {
            entitys.add(mockEntity(i));
        }
        return entitys;
    }

    protected abstract void setOdersValues(E entity, Integer number);

    protected abstract Class<E> getClazz();
}
