package com.moraes.device_api.mock.util;

import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Date;
import java.util.List;

public final class MockUtil {

    private MockUtil() {
        /** empty */
    }

    /**
     * Fill an object with mock values using reflection.
     * <p>
     * Given an object, an integer to use when generating values, and a list of
     * field names to ignore,
     * this method will set the values of all non-final, non-static fields of the
     * object using reflection.
     * <p>
     * The values generated are based on the type of the field. For example, a field
     * of type {@link java.lang.Boolean}
     * will be set to {@code true}, a field of type {@link java.lang.Double} will be
     * set to
     * {@code number.doubleValue() + 0.5}, and a field of type
     * {@link java.lang.Integer} will be set to
     * {@code number}.
     * <p>
     *
     * @param object       the object to fill with mock values
     * @param number       the number to use when generating values
     * @param ignoreFields the list of field names to ignore
     * @throws Exception if a field cannot be set
     */
    public static void toFill(Object object, Integer number, List<String> ignoreFields) throws Exception {
        for (Field field : object.getClass().getDeclaredFields()) {
            if (!ignoreFields.contains(field.getName())) {
                setValue(object, field.getName(), field.getType(), MockUtil.generateValue(field, number));
            }
        }
    }

    /**
     * Set a value to an object field using reflection.
     * <p>
     * The method name is generated by prepending "set" to the field name and
     * capitalizing the first letter.
     * <p>
     * 
     * @param entity the object to set the value to
     * @param name   the name of the field to set
     * @param type   the type of the field to set
     * @param value  the value to set
     * @throws Exception if the method invocation fails
     */
    public static void setValue(Object entity, String name, Class<?> type, Object value) throws Exception {
        name = "set%s".formatted(name.replaceFirst("^.", ("" + name.charAt(0)).toUpperCase()));
        entity.getClass().getMethod(name, type).invoke(entity, value);
    }

    /**
     * Generate a string with the given size, consisting of 'a' characters.
     * 
     * @param size the size of the string to be generated
     * @return a string with the given size, consisting of 'a' characters
     */
    public static String getStringBySize(Integer size) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < size; i++) {
            sb.append("a");
        }
        return sb.toString();
    }

    /**
     * Generate a value based on the type of the given field.
     *
     * @param field  the field to generate a value for
     * @param number the number to use when generating the value
     * @return the generated value
     */
    public static Object generateValue(Field field, Integer number) {
        switch (field.getType().getSimpleName().toUpperCase()) {
            case "BOOLEAN":
                return true;
            case "DOUBLE":
                return number.doubleValue() + 0.5;
            case "LONG":
                return number.longValue();
            case "INTEGER", "INT":
                return number;
            case "BIGDECIMAL":
                return BigDecimal.valueOf(number.doubleValue() + 0.5);
            case "DATE":
                return new Date();
            case "LOCALDATETIME":
                return LocalDateTime.now();
            case "LOCALDATE":
                return LocalDate.now();
            case "STRING":
                return "Teste String" + number;
            default:
                return null;
        }
    }
}
